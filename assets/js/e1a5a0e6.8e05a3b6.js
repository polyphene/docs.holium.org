"use strict";(self.webpackChunkholium_docs=self.webpackChunkholium_docs||[]).push([[133],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||c[m]||a;return n?o.createElement(f,i(i({ref:t},p),{},{components:n})):o.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2500:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return d}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],s={sidebar_label:"Run the transformation pipeline",sidebar_position:8},l="Run the transformation pipeline",u={unversionedId:"get-started/run",id:"get-started/run",isDocsHomePage:!1,title:"Run the transformation pipeline",description:"Now that we know that our pipeline is sane, we will focus on the execution.",source:"@site/docs/get-started/run.md",sourceDirName:"get-started",slug:"/get-started/run",permalink:"/docs.holium.org/get-started/run",editUrl:"https://github.com/polyphene/holium-docs/blob/main/docs/get-started/run.md",version:"current",sidebarPosition:8,frontMatter:{sidebar_label:"Run the transformation pipeline",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Version the pipeline DAG",permalink:"/docs.holium.org/get-started/versionning"},next:{title:"Guides",permalink:"/docs.holium.org/guides"}},p=[],c={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"run-the-transformation-pipeline"},"Run the transformation pipeline"),(0,a.kt)("p",null,"Now that we know that our pipeline is sane, we will focus on the execution."),(0,a.kt)("p",null,"The only thing left to do before executing our transformation pipeline is to define ",(0,a.kt)("strong",{parentName:"p"},"portations")," to\nimport data to Holium and export data from Holium. In our case we will apply two import portations\nto our sources and one export portation to our shaper."),(0,a.kt)("p",null,"The different files that we will use as our imported data can be found in ",(0,a.kt)("inlineCode",{parentName:"p"},"./assets/sources"),"."),(0,a.kt)("p",null,"In the first file, ",(0,a.kt)("inlineCode",{parentName:"p"},"avocado.json"),", we can find all retails sales details for avocado in the US. The second\nfile holds the year we want to conduct our operation on."),(0,a.kt)("p",null,"To create a new portation the ",(0,a.kt)("inlineCode",{parentName:"p"},"holium portation create")," sub-command can be used. We will also review\nthe created portations by using the sub-command ",(0,a.kt)("inlineCode",{parentName:"p"},"holium portation list")," :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ holium portation create \\\n        --direction toHolium \\\n        --node-type source \\\n        --node-name avocado_sales \\\n        --file-path ./assets/sources/avocado.json \\\n        --file-format json\nnew object created: to:source:avocado_sales\n\n$ holium portation create \\\n        --direction toHolium \\\n        --node-type source \\\n        --node-name selected_year \\\n        --file-path ./assets/sources/selected_year.json \\\n        --file-format json\nnew object created: to:source:selected_year\n\n$ holium portation create \\\n        --direction fromHolium \\\n        --node-type shaper \\\n        --node-name sales_results \\\n        --file-path sales_results.json \\\n        --file-format json\nnew object created: from:shaper:sales_results\n")),(0,a.kt)("p",null,"As we have now defined all necessary information to have a proper transformation pipeline DAG and data\nsourcing we can execute it!"),(0,a.kt)("p",null,"To do so, the sub-command ",(0,a.kt)("inlineCode",{parentName:"p"},"holium project run")," is available:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ holium project run\nsuccessfully ran the transformation pipeline\n\n1 successful export(s) during execution:\nshaper:sales_results \u2192 sales_results.json\n")),(0,a.kt)("p",null,"Now if we open our ",(0,a.kt)("inlineCode",{parentName:"p"},"sales_results.json")," file we can find the generated json object:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'$ cat sales_results.json\n[[["4046",1709447236.0],["4225",1761051252.0],["4770",142770478.0]]]\n')),(0,a.kt)("p",null,"In the end, we have created a valid pipeline that can run to produce data based on our connections and\ntransformations. "),(0,a.kt)("p",null,"This is the end of the base tutorial ! If you have any more questions please feel free to open a discussion\non the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/polyphene/getting-started/issues"},"repository"),"\nor reach out to the ",(0,a.kt)("a",{parentName:"p",href:"https://discord.gg/A3t5ZFSbCG"},"community"),"."))}d.isMDXComponent=!0}}]);