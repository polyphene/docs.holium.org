"use strict";(self.webpackChunkholium_docs=self.webpackChunkholium_docs||[]).push([[959],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return p}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),d=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=d(e.components);return i.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=d(n),p=a,f=m["".concat(l,".").concat(p)]||m[p]||c[p]||o;return n?i.createElement(f,r(r({ref:t},u),{},{components:n})):i.createElement(f,r({ref:t},u))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var d=2;d<o;d++)r[d]=n[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8606:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return u},default:function(){return m}});var i=n(7462),a=n(3366),o=(n(7294),n(3905)),r=["components"],s={sidebar_label:"Design",sidebar_position:3},l="Design",d={unversionedId:"about-holium/design",id:"about-holium/design",isDocsHomePage:!1,title:"Design",description:"The design of Holium closely followed aforementioned principles to describe in a very expressive and modular way any",source:"@site/docs/about-holium/design.md",sourceDirName:"about-holium",slug:"/about-holium/design",permalink:"/about-holium/design",editUrl:"https://github.com/polyphene/holium-docs/blob/main/docs/about-holium/design.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Design",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Design principles",permalink:"/about-holium/design-principles"},next:{title:"Setting up",permalink:"/get-started/setting-up"}},u=[{value:"Representation of data",id:"representation-of-data",children:[]},{value:"The architecture of transformations",id:"the-architecture-of-transformations",children:[]},{value:"Description of pipelines",id:"description-of-pipelines",children:[]}],c={toc:u};function m(e){var t=e.components,s=(0,a.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"design"},"Design"),(0,o.kt)("p",null,"The design of Holium closely followed aforementioned principles to describe in a very expressive and modular way any\ndata and transformation pipeline. While reference specifications can also be found in the documentation, this page is\ndedicated to explain how it works in three simple incremental steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The representation of data and datasets."),(0,o.kt)("li",{parentName:"ol"},"The architecture of transformations."),(0,o.kt)("li",{parentName:"ol"},"The description of transformation pipelines.")),(0,o.kt)("h2",{id:"representation-of-data"},"Representation of data"),(0,o.kt)("p",null,"Any data in the Holium framework is serialized with one format: ",(0,o.kt)("em",{parentName:"p"},"HoliumCBOR"),". It is based on\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://cbor.io/"},"Concise Binary Object Representation (CBOR)"),", a standard supported by\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://www.ietf.org/"},"Internet Engineering Task Force (IETF)")," and based on the popular JSON format. It requires no\nschema and embraces a concise typed encoding system. Therefore, ",(0,o.kt)("strong",{parentName:"p"},"anything that can be represented in a JSON file can be\nused")," in Holium. And most importantly, ",(0,o.kt)("strong",{parentName:"p"},"any complex data (audio, image and video files for instance) can also be\nused")," thanks to CBOR type n\xb02, which natively handles byte strings."),(0,o.kt)("p",null,"Two edits are made to CBOR in order to make it truly modular in the framework."),(0,o.kt)("p",null,"First and foremost, ",(0,o.kt)("em",{parentName:"p"},"mappings")," are prohibited. ",(0,o.kt)("strong",{parentName:"p"},"Data representations are freed from any ",(0,o.kt)("em",{parentName:"strong"},"key")," that would lock it into a\nspecific semantics.")," That way, the format ",(0,o.kt)("strong",{parentName:"p"},"fosters data re-usability"),", while contextual meta-data are freely attached\nand detached at another level. One of the main benefit is that when it comes to data manipulation, transformations never\nhave to know specific string keys: they only manipulate arrays and indexes."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"holium-cbor-key-layer",src:n(1715).Z})),(0,o.kt)("p",null,"As an example, in Holium, a transformation responsible for performing a euclidean division would never require a fixed\nnaming of its input parameters. At the protocol-level, it would never manipulate mapping\nlike ",(0,o.kt)("inlineCode",{parentName:"p"},'{ "dividend": 1071, "divisor": 462 }'),", but only an array containing data to be transformed: ",(0,o.kt)("inlineCode",{parentName:"p"},"[ 1071, 462 ]"),".\nHowever, this array is later used, whatever the semantics, it will consistently stay the same array, with a unique identifier,\nto which any contextual information (in this case, the keys ",(0,o.kt)("inlineCode",{parentName:"p"},'"dividend"')," and ",(0,o.kt)("inlineCode",{parentName:"p"},'"divisor"'),") can be attached at any moment."),(0,o.kt)("p",null,"The second adjustment to the original CBOR specification is the introduction of linked data to represent any recursive\nstructure. In Holium, scalar data (booleans, numbers, strings,\u2026) are represented in individual blocks, each one with\ntheir own unique identifier, to which points any recursive structure through linked data."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"holium-data-fragmentation-without-links",src:n(8006).Z})),(0,o.kt)("p",null,"In this example, three scalar values are represented on the left: the numbers ",(0,o.kt)("inlineCode",{parentName:"p"},"21"),",  ",(0,o.kt)("inlineCode",{parentName:"p"},"462")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"1071"),". Each one of them\nresides in its own block, can be formatted as a proper HoliumCBOR object, and has a unique identifier."),(0,o.kt)("p",null,"On the right are shown representations of two recursive values: ",(0,o.kt)("inlineCode",{parentName:"p"},"[ 1071, 462 ]")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"[ [ 1071, 462 ], 21 ]"),". When\nformatted with HoliumCBOR, such arrays do not hold scalar values directly, but identifiers of these values instead."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"holium-data-fragmentation-with-links",src:n(5424).Z})),(0,o.kt)("p",null,"Arrays thus only hold identifiers recursively linking them towards atomized scalar data. Values of all types, scalar or\nrecursive, thus benefit from identifiers that both uniquely identify their content and maximize their re-usability."),(0,o.kt)("h2",{id:"the-architecture-of-transformations"},"The architecture of transformations"),(0,o.kt)("p",null,"Building on the modularity of the data representation format, data is repeatedly transformed\nby ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Pure_function"},"pure functions")," executed in a WebAssembly (Wasm) runtime."),(0,o.kt)("p",null,"WebAssembly is an open standard designed and maintained by the ",(0,o.kt)("a",{parentName:"p",href:"https://www.w3.org/"},"World Wide Web Consortium (W3C)"),".\nIn the words of its creators, it is ",(0,o.kt)("em",{parentName:"p"},"a safe, portable, low-level code format designed for efficient execution and\ncompact representation"),".",(0,o.kt)("sup",{parentName:"p",id:"fnref-1"},(0,o.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))),(0,o.kt)("p",null,"Looking at the evolution of serverless architectures, WebAssembly is a logical successor to containers, enabling to shift\nfocus from stack implementation to business logic, embracing the benefits of function-based designs."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"execution-environment-json",src:n(4732).Z})),(0,o.kt)("p",null,"Each transformation thus run in an efficient sandboxed environment. A program responsible for running a euclidean\ndivision could for instance be written in Rust, compiled into Wasm bytecode and executed in this environment. With\nHolium, the modularity of the data format allows to instantiate the program with just the data it requires, let it\nexecute its logic and return the result."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"execution-environment",src:n(1956).Z})),(0,o.kt)("p",null,"As mentioned in the previous section, input and output data, at the edges of the execution, are formatted with Holium\nCBOR and hold no semantic information. To allow transformation developers to still use their own internal semantics\nwhile not imposing it to pipeline designers and any other layer in the architecture, SDKs allow to easily translate\ninput and output HoliumCBOR parameters from and to internal structures."),(0,o.kt)("p",null,"This is one of the core elements of the design of Holium: ",(0,o.kt)("strong",{parentName:"p"},"pure functions, given some input parameters in HoliumCBOR\nformat, are executed in WebAssembly runtimes and return output data in HoliumCBOR format"),". As both data and\ntransformation designs are extremely modular, this logically leads to flexible definitions of pipeline structures."),(0,o.kt)("h2",{id:"description-of-pipelines"},"Description of pipelines"),(0,o.kt)("p",null,"As in Holium every data items are ultimately united by a common format, and this format is the only one used for input\nand output parameters of transformations, it becomes very convenient to chain transformations. This, combined with the fact\nthat HoliumCBOR allows extensive manipulation of values using indexes only, chaining transformations and creating\npipelines of any complexity and size basically comes down to describing simple connections between indexes."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"holium-cbor-connections",src:n(5569).Z})),(0,o.kt)("p",null,"In this example, transformations are chained to perform the euclidean algorithm and find the greatest common divisor of\ntwo initial values. The remainder (second output) of the first transformation is simply connected to the divisor entry (\nsecond input) of the second one."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"holium-cbor-connections-with-pipeline-info",src:n(1749).Z})),(0,o.kt)("p",null,"Identifying this construction with indexes, we manage to express complex pipelines with fairly simple structures.\nPipelines, internally described as directed acyclic graph, of any shapes can all in the end be reduced to this kind of\nset of connections. Depending on the type of information the nodes of these graphs hold, we may use them to describe\ndata itself with its history like in this example, as well as to share only its paths made of ",(0,o.kt)("em",{parentName:"p"},"dry")," transformations with\nno specific data, or to attach any other information of interest in the context of data processing."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"holium-data-fragmentation-all-types",src:n(5528).Z})),(0,o.kt)("p",null,"Apart from scalar and recursive data studied above, all these other components are also built on linked data, preserving\ntheir readiness for modularity and scalability, and offering them unique identifiers."),(0,o.kt)("p",null,"To conclude this introduction to the core design of Holium, we may synthesize its main characteristics with the three\nsame steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The HoliumCBOR format allows to represent any data (scalar and recursive, structured and complex) in a unified way.\nIt frees data from any semantic lock at the transformation layer, fosters its re-usability by atomizing it, and\nprovides any item of data with a unique identifier."),(0,o.kt)("li",{parentName:"ol"},"Transformations are pure functions run inside a WebAssembly environment that only ingests and digests data in Holium\nCBOR format. SDKs in multiple languages allow developers of transformations to seamlessly translate input and output\ndata into any internal structure, and integrate their modules into the Holium framework."),(0,o.kt)("li",{parentName:"ol"},"Pipeline structures of any topology can be described in a unified way, connecting input and output indexes of chained\ntransformations. The construction of these structures offers them unique identifiers and make them capable of holding\ninformation of many types (results of execution, actual Wasm bytecode,\u2026), efficiently attached with linked data.")),(0,o.kt)("div",{className:"footnotes"},(0,o.kt)("hr",{parentName:"div"}),(0,o.kt)("ol",{parentName:"div"},(0,o.kt)("li",{parentName:"ol",id:"fn-1"},(0,o.kt)("a",{parentName:"li",href:"https://www.w3.org/TR/wasm-core-1/#introduction%E2%91%A2"},"Introduction of the WebAssembly Core Specification"),", W3C.",(0,o.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}m.isMDXComponent=!0},4732:function(e,t,n){t.Z=n.p+"assets/images/execution-environment-json-5eff9840403753c20dd6c65a037eb902.svg"},1956:function(e,t,n){t.Z=n.p+"assets/images/execution-environment-844128a546fbbea6a6ca871443038768.svg"},1749:function(e,t,n){t.Z=n.p+"assets/images/holium-cbor-connections-with-pipeline-info-76185c1c41aad193807ae767f5814bb5.svg"},5569:function(e,t,n){t.Z=n.p+"assets/images/holium-cbor-connections-3df4f993de7a45722bc9afdb97797fb8.svg"},1715:function(e,t,n){t.Z=n.p+"assets/images/holium-cbor-key-layer-460806e07358e9f67106e5b620f0c303.svg"},5528:function(e,t,n){t.Z=n.p+"assets/images/holium-data-fragmentation-all-types-5118d53f63b802d8ae565ad8f3881b72.svg"},5424:function(e,t,n){t.Z=n.p+"assets/images/holium-data-fragmentation-with-links-7a57d085eacd26a6be48a2717cc13686.svg"},8006:function(e,t,n){t.Z=n.p+"assets/images/holium-data-fragmentation-without-links-9c0e7698945f9f8d3f26fd6222b025b9.svg"}}]);