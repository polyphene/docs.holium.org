"use strict";(self.webpackChunkholium_docs=self.webpackChunkholium_docs||[]).push([[325],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return u}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,f=m["".concat(s,".").concat(u)]||m[u]||p[u]||a;return n?o.createElement(f,i(i({ref:t},d),{},{components:n})):o.createElement(f,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8407:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],l={sidebar_label:"Glossary",sidebar_position:1},s="Glossary",c={unversionedId:"meta/glossary",id:"meta/glossary",isDocsHomePage:!1,title:"Glossary",description:"Concise Binary Object Representation (CBOR)",source:"@site/docs/meta/glossary.md",sourceDirName:"meta",slug:"/meta/glossary",permalink:"/docs.holium.org/meta/glossary",editUrl:"https://github.com/polyphene/holium-docs/blob/main/docs/meta/glossary.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Glossary",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Contributing",permalink:"/docs.holium.org/contributing"},next:{title:"Q&A",permalink:"/docs.holium.org/meta/question-and-answer"}},d=[{value:"Concise Binary Object Representation (CBOR)",id:"cbor",children:[]},{value:"Connection",id:"connection",children:[]},{value:"Content Identifier (CID)",id:"cid",children:[]},{value:"Directed acyclic graph (DAG)",id:"dag",children:[]},{value:"HoliumCBOR",id:"holiumcbor",children:[]},{value:"Module",id:"module",children:[]},{value:"Multiformats",id:"multiformats",children:[]},{value:"Pipeline",id:"pipeline",children:[]},{value:"Selector",id:"selector",children:[]},{value:"Transformation",id:"transformation",children:[]},{value:"WebAssembly",id:"wasm",children:[]}],p={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"glossary"},"Glossary"),(0,a.kt)("h2",{id:"cbor"},"Concise Binary Object Representation (CBOR)"),(0,a.kt)("p",null,"The Concise Binary Object Representation is a data format based on JSON, featuring small code and message size,\nand extensibility.\nIn the Holium protocol, it is extended in a representation freed from any semantic lock, known as ",(0,a.kt)("strong",{parentName:"p"},"HoliumCBOR"),".\nRead more on CBOR ",(0,a.kt)("a",{parentName:"p",href:"https://cbor.io/"},"documentation"),"."),(0,a.kt)("h2",{id:"connection"},"Connection"),(0,a.kt)("p",null,"A connection links two transformations in a pipeline. They are they edges of the underlying DAG.\nSee ",(0,a.kt)("a",{parentName:"p",href:"#selector"},"Selector")," for more details."),(0,a.kt)("h2",{id:"cid"},"Content Identifier (CID)"),(0,a.kt)("p",null,"A Content Identifier is a self-describing content-addressed label used to point to data in the interplanetary area or\nin ",(0,a.kt)("a",{parentName:"p",href:"https://ipfs.io/"},"IPFS"),".\nIt is the core identifier used for IPFS and IPLD.\nFind more on IPFS ",(0,a.kt)("a",{parentName:"p",href:"https://docs.ipfs.io/concepts/content-addressing/"},"documentation"),"."),(0,a.kt)("h2",{id:"dag"},"Directed acyclic graph (DAG)"),(0,a.kt)("p",null,"A directed acyclic graph (DAG) formally is a directed graph with no directed cycles.\nIt is made of nodes and edges, with each edge directed from one node to another, such that following those\ndirections will never form a closed loop.\nThey offer the characteristic of being capable of being topologically ordered,\nby arranging the nodes as a linear ordering that is consistent with all edge directions."),(0,a.kt)("p",null,"In Holium, all transformation pipelines are directed acyclic graphs."),(0,a.kt)("h2",{id:"holiumcbor"},"HoliumCBOR"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"#cbor"},"CBOR"),"."),(0,a.kt)("h2",{id:"module"},"Module"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"#wasm"},"WebAssembly")," programs are organized into modules, which are the unit of deployment, loading, and compilation.\nA module collects definitions for types, functions, tables, memories, and globals."),(0,a.kt)("p",null,"In Holium, the code for several pure functions can be placed in the same module.\nFor this reason, a ",(0,a.kt)("a",{parentName:"p",href:"#transformation"},"transformation")," holds a module bytecode and a ",(0,a.kt)("em",{parentName:"p"},"handle"),"."),(0,a.kt)("h2",{id:"multiformats"},"Multiformats"),(0,a.kt)("p",null,"The Multiformats project is a collection of protocols that aim to future-proof systems today, used by ",(0,a.kt)("a",{parentName:"p",href:"#cid"},"CIDs"),".\nA key design principle is enhancing format values with self-description allowing for interoperability and protocol agility.\nRead more about Multiformats ",(0,a.kt)("a",{parentName:"p",href:"https://multiformats.io/"},"documentation"),"."),(0,a.kt)("h2",{id:"pipeline"},"Pipeline"),(0,a.kt)("p",null,"A pipeline, or transformation pipeline, is the structure in Holium that links atomic transformations. It is specified\nas a ",(0,a.kt)("a",{parentName:"p",href:"#dag"},"DAG")," of nodes which hold data, sometimes ",(0,a.kt)("a",{parentName:"p",href:"#wasm"},"Wasm")," code, and are linked by ",(0,a.kt)("a",{parentName:"p",href:"#connection"},"connections"),"."),(0,a.kt)("h2",{id:"selector"},"Selector"),(0,a.kt)("p",null,"A selector is an expression, often represented as a JSON literal, describing traversal over a tree (or more generally a DAG)\nand selecting a subset of nodes by ",(0,a.kt)("em",{parentName:"p"},"marking")," them during the walk."),(0,a.kt)("p",null,"In Holium, selectors allow shaping data between transformations (nodes) of a pipeline (dag).\nIn that purpose, any connection (edge) holds a tail selector informing the parts of data from the parent node to handle,\nand a head selector matching its cardinality and describing how to shape it into parts of the input parameter of the\nchild node."),(0,a.kt)("p",null,"Selectors used in Holium and specified in the reference ",(0,a.kt)("a",{parentName:"p",href:"/docs.holium.org/reference/design#selectors-and-connections"},"schema"),"\nare a subset of IPLD Selectors. Read more on IPLD ",(0,a.kt)("a",{parentName:"p",href:"https://ipld.io/specs/selectors/"},"documentation"),"."),(0,a.kt)("h2",{id:"transformation"},"Transformation"),(0,a.kt)("p",null,"Nodes of a pipeline effectively executing code to manipulate data are known in the Holium protocol as transformations."),(0,a.kt)("p",null,"They can be considered as pure functions taking one parameter in HoliumCBOR format, executing, and returning on HoliumCBOR\nvalue in case of success."),(0,a.kt)("p",null,"In practice, a transformation is made of a Wasm ",(0,a.kt)("a",{parentName:"p",href:"#module"},"module")," and a string named ",(0,a.kt)("em",{parentName:"p"},"handle")," informing on the name of the\nfunction to be run."),(0,a.kt)("h2",{id:"wasm"},"WebAssembly"),(0,a.kt)("p",null,"WebAssembly (Wasm) is a ",(0,a.kt)("em",{parentName:"p"},"safe, portable, low-level code format")," designed for efficient execution and compact\nrepresentation. In the Holium protocol, it is used as the common code format for all transformation nodes of a pipeline.\nRead more on the ",(0,a.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/wasm-core-1/#introduction%E2%91%A2"},"documentation")," by the World Wide Web Consortium."))}m.isMDXComponent=!0}}]);